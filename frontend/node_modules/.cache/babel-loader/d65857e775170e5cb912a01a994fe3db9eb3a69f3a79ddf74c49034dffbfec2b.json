{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuvraj\\\\Desktop\\\\expense management\\\\frontend\\\\src\\\\context\\\\globalContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchData = async endpoint => {\n    try {\n      const response = await axios.get(`${BASE_URL}${endpoint}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching ${endpoint}:`, error);\n      return [];\n    }\n  };\n  const getTransactions = async () => {\n    const data = await fetchData(\"transactions\"); // Adjust API route as needed\n    setTransactions(data);\n    setLoading(false);\n  };\n  useEffect(() => {\n    getTransactions();\n  }, []);\n  const addIncome = async income => {\n    try {\n      const parsedAmount = parseFloat(income.amount);\n\n      // Check if amount is valid and positive\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\n        setError(\"Amount must be a positive number.\");\n        return;\n      }\n      await axios.post(`${BASE_URL}add-income`, {\n        ...income,\n        amount: parsedAmount // Send the amount as a number\n      });\n      getIncomes();\n    } catch (err) {\n      setError(err.response.data.message);\n    }\n  };\n  const getIncomes = async () => {\n    const data = await fetchData(\"get-incomes\");\n    setIncomes(data);\n  };\n  const deleteIncome = async id => {\n    await axios.delete(`${BASE_URL}delete-income/${id}`);\n    getIncomes();\n  };\n  const updateIncome = async (id, updatedIncome) => {\n    try {\n      const parsedAmount = parseFloat(updatedIncome.amount);\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\n        setError(\"Amount must be a positive number.\");\n        return;\n      }\n      await axios.put(`${BASE_URL}update-income/${id}`, {\n        ...updatedIncome,\n        amount: parsedAmount\n      });\n      getIncomes(); // Refresh incomes after update\n    } catch (err) {\n      setError(err.response.data.message);\n    }\n  };\n  const totalIncome = () => incomes.reduce((total, income) => total + income.amount, 0);\n  const addExpense = async expense => {\n    try {\n      const parsedAmount = parseFloat(expense.amount);\n\n      // Check if amount is valid and positive\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\n        setError(\"Amount must be a positive number.\");\n        return;\n      }\n      await axios.post(`${BASE_URL}add-expense`, {\n        ...expense,\n        amount: parsedAmount // Send the amount as a number\n      });\n      getExpenses();\n    } catch (err) {\n      setError(err.response.data.message);\n    }\n  };\n  const getExpenses = async () => {\n    const data = await fetchData(\"get-expenses\");\n    setExpenses(data);\n  };\n  const deleteExpense = async id => {\n    await axios.delete(`${BASE_URL}delete-expense/${id}`);\n    getExpenses();\n  };\n  const updateExpense = async (id, updatedExpense) => {\n    try {\n      const parsedAmount = parseFloat(updatedExpense.amount);\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\n        setError(\"Amount must be a positive number.\");\n        return;\n      }\n      await axios.put(`${BASE_URL}update-expense/${id}`, {\n        ...updatedExpense,\n        amount: parsedAmount\n      });\n      getExpenses(); // Refresh expenses after update\n    } catch (err) {\n      setError(err.response.data.message);\n    }\n  };\n  const totalExpenses = () => expenses.reduce((total, expense) => total + expense.amount, 0);\n  const totalBalance = () => totalIncome() - totalExpenses();\n  const transactionHistory = () => {\n    const history = [...incomes, ...expenses];\n    history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    return history.slice(0, 3);\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      addIncome,\n      getIncomes,\n      incomes,\n      deleteIncome,\n      expenses,\n      totalIncome,\n      addExpense,\n      getExpenses,\n      deleteExpense,\n      totalExpenses,\n      totalBalance,\n      transactionHistory,\n      error,\n      setError,\n      transactions,\n      loading,\n      updateIncome,\n      updateExpense\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalProvider, \"6ZyB2nV20vQJsj9dWqC5atZs2Bg=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","BASE_URL","GlobalContext","createContext","GlobalProvider","children","_s","incomes","setIncomes","expenses","setExpenses","error","setError","transactions","setTransactions","loading","setLoading","fetchData","endpoint","response","get","data","console","getTransactions","addIncome","income","parsedAmount","parseFloat","amount","isNaN","post","getIncomes","err","message","deleteIncome","id","delete","updateIncome","updatedIncome","put","totalIncome","reduce","total","addExpense","expense","getExpenses","deleteExpense","updateExpense","updatedExpense","totalExpenses","totalBalance","transactionHistory","history","sort","a","b","Date","createdAt","slice","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["C:/Users/Yuvraj/Desktop/expense management/frontend/src/context/globalContext.jsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\r\n\r\nconst GlobalContext = React.createContext();\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [incomes, setIncomes] = useState([]);\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchData = async (endpoint) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}${endpoint}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching ${endpoint}:`, error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getTransactions = async () => {\r\n    const data = await fetchData(\"transactions\"); // Adjust API route as needed\r\n    setTransactions(data);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTransactions();\r\n  }, []);\r\n\r\n  const addIncome = async (income) => {\r\n    try {\r\n      const parsedAmount = parseFloat(income.amount);\r\n  \r\n      // Check if amount is valid and positive\r\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\r\n        setError(\"Amount must be a positive number.\");\r\n        return;\r\n      }\r\n  \r\n      await axios.post(`${BASE_URL}add-income`, {\r\n        ...income,\r\n        amount: parsedAmount, // Send the amount as a number\r\n      });\r\n      getIncomes();\r\n    } catch (err) {\r\n      setError(err.response.data.message);\r\n    }\r\n  };\r\n\r\n  const getIncomes = async () => {\r\n    const data = await fetchData(\"get-incomes\");\r\n    setIncomes(data);\r\n  };\r\n\r\n  const deleteIncome = async (id) => {\r\n    await axios.delete(`${BASE_URL}delete-income/${id}`);\r\n    getIncomes();\r\n  };\r\n\r\n  const updateIncome = async (id, updatedIncome) => {\r\n    try {\r\n      const parsedAmount = parseFloat(updatedIncome.amount);\r\n\r\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\r\n        setError(\"Amount must be a positive number.\");\r\n        return;\r\n      }\r\n\r\n      await axios.put(`${BASE_URL}update-income/${id}`, {\r\n        ...updatedIncome,\r\n        amount: parsedAmount,\r\n      });\r\n      getIncomes(); // Refresh incomes after update\r\n    } catch (err) {\r\n      setError(err.response.data.message);\r\n    }\r\n  };\r\n\r\n  const totalIncome = () =>\r\n    incomes.reduce((total, income) => total + income.amount, 0);\r\n\r\n  \r\n\r\n    const addExpense = async (expense) => {\r\n      try {\r\n        const parsedAmount = parseFloat(expense.amount);\r\n    \r\n        // Check if amount is valid and positive\r\n        if (isNaN(parsedAmount) || parsedAmount <= 0) {\r\n          setError(\"Amount must be a positive number.\");\r\n          return;\r\n        }\r\n    \r\n        await axios.post(`${BASE_URL}add-expense`, {\r\n          ...expense,\r\n          amount: parsedAmount, // Send the amount as a number\r\n        });\r\n        getExpenses();\r\n      } catch (err) {\r\n        setError(err.response.data.message);\r\n      }\r\n    };\r\n\r\n  const getExpenses = async () => {\r\n    const data = await fetchData(\"get-expenses\");\r\n    setExpenses(data);\r\n  };\r\n\r\n  const deleteExpense = async (id) => {\r\n    await axios.delete(`${BASE_URL}delete-expense/${id}`);\r\n    getExpenses();\r\n  };\r\n\r\n  const updateExpense = async (id, updatedExpense) => {\r\n    try {\r\n      const parsedAmount = parseFloat(updatedExpense.amount);\r\n\r\n      if (isNaN(parsedAmount) || parsedAmount <= 0) {\r\n        setError(\"Amount must be a positive number.\");\r\n        return;\r\n      }\r\n\r\n      await axios.put(`${BASE_URL}update-expense/${id}`, {\r\n        ...updatedExpense,\r\n        amount: parsedAmount,\r\n      });\r\n      getExpenses(); // Refresh expenses after update\r\n    } catch (err) {\r\n      setError(err.response.data.message);\r\n    }\r\n  };\r\n\r\n  const totalExpenses = () =>\r\n    expenses.reduce((total, expense) => total + expense.amount, 0);\r\n\r\n\r\n  const totalBalance = () => totalIncome() - totalExpenses();\r\n\r\n  const transactionHistory = () => {\r\n    const history = [...incomes, ...expenses];\r\n    history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    return history.slice(0, 3);\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        addIncome,\r\n        getIncomes,\r\n        incomes,\r\n        deleteIncome,\r\n        expenses,\r\n        totalIncome,\r\n        addExpense,\r\n        getExpenses,\r\n        deleteExpense,\r\n        totalExpenses,\r\n        totalBalance,\r\n        transactionHistory,\r\n        error,\r\n        setError,\r\n        transactions,\r\n        loading,\r\n        updateIncome,\r\n        updateExpense\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(GlobalContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}